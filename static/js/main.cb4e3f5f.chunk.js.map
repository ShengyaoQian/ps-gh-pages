{"version":3,"sources":["components/ReplyDialog.js","components/PostDetails.js","components/Post.js","components/PostGrid.js","components/CreatePostDialog.js","components/web3.js","abis/PublicSquare.js","App.js","reportWebVitals.js","index.js"],"names":["ReplyDialog","props","state","content","handleContentChange","bind","handleReply","event","this","setState","target","value","preventDefault","replyToPost","postId","handleCloseReply","Dialog","open","replyToPostOpen","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","DialogContentText","Stack","spacing","sx","width","m","TextField","id","label","multiline","rows","onChange","placeholder","DialogActions","Button","onClick","React","Component","PostDetails","showReplies","handleCloseShowReplies","replies","map","reply","key","Card","CardContent","Typography","style","wordWrap","fontSize","color","paragraph","variant","inline","gutterBottom","author","ExpandMore","styled","expand","other","IconButton","theme","transform","marginLeft","transition","transitions","create","duration","shortest","Post","contentExpanded","handleContentExpandClick","handleClickOpenReply","handleShowReplies","a","publicSquare","methods","getReplyIndicesOfPost","call","replyIndices","i","length","getReply","getReplies","date","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","closeTimestamp","closed","Date","getTime","title","display","Collapse","in","timeout","unmountOnExit","CardActions","disabled","PostGrid","posts","post","CreatePostDialog","hours","handleTitleChange","keyPressForTitle","handleHoursChange","handleCreate","keyCode","createPost","createPostOpen","handleClose","replace","type","InputLabelProps","shrink","web3Provider","window","ethereum","request","method","console","error","web3","log","currentProvider","alert","Web3","initWeb3","PublicSquareABI","App","account","postCount","loading","handleClickOpen","loadBlockchainData","eth","getAccounts","accounts","Contract","sort","b","hoursBeforeClose","send","from","once","receipt","location","reload","on","className","direction","justifyContent","alignItems","backgroundColor","Fragment","align","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb4e3f5f.chunk.js","sourcesContent":["import TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\nclass ReplyDialog extends React.Component {\n\n  handleContentChange(event) {\n    this.setState({content: event.target.value});\n  }\n\n  handleReply(event) {\n    event.preventDefault();\n    this.props.replyToPost(this.props.postId, this.state.content);\n    this.setState({content: ''});\n    this.props.handleCloseReply();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: '',\n    }\n\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleReply = this.handleReply.bind(this);\n  }\n\n  render() {\n    return (\n      <Dialog\n       open={this.props.replyToPostOpen}\n       onClose={this.props.handleCloseReply}\n       fullWidth\n       maxWidth=\"md\">\n        <DialogTitle>Reply to the post</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Your reply will be release at close time.\n          </DialogContentText>\n          <Stack spacing={2} sx={{ width: '95%', m: 2}}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Reply\"\n              multiline\n              rows={4}\n              value={this.state.content}\n              onChange={this.handleContentChange}\n              placeholder=\"Reply\"\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.handleCloseReply}>Cancel</Button>\n          <Button onClick={this.handleReply}>Reply</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default ReplyDialog;\n","import Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\n\nclass PostDetails extends React.Component {\n    render() {\n      return (\n        <Dialog\n         open={this.props.showReplies}\n         onClose={this.props.handleCloseShowReplies}\n         fullWidth\n         maxWidth=\"lg\">\n          <DialogTitle>Replies for this post</DialogTitle>\n          <DialogContent>\n            <Stack spacing={2} sx={{ width: '95%', m: 2}}>\n              {this.props.replies.map((reply, key) => {\n                  return (\n                    <Card>\n                      <React.Fragment>\n                        <CardContent>\n                          <Typography style={{ wordWrap: \"break-word\" }} sx={{ fontSize: 20 }} color=\"text.secondary\" paragraph>\n                              {reply.content}\n                          </Typography>\n                          <Typography style={{ wordWrap: \"break-word\" }} variant=\"overline\" inline gutterBottom>\n                              Author: {reply.author}\n                          </Typography>\n                        </CardContent>\n                      </React.Fragment>\n                    </Card>\n                  )\n              })}\n            </Stack>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.props.handleCloseShowReplies}>Close</Button>\n          </DialogActions>\n        </Dialog>\n      );\n    }\n}\n\nexport default PostDetails;\n","import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Collapse from '@mui/material/Collapse';\nimport { styled } from '@mui/material/styles';\nimport IconButton from '@mui/material/IconButton';\nimport ReplyDialog from './ReplyDialog.js';\nimport PostDetails from './PostDetails.js';\n\nconst ExpandMore = styled((props) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n    })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n    }),\n    }));\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contentExpanded: false,\n      replyToPostOpen: false, // enter reply text box\n      showReplies: false, // result replies\n      replies: []\n    }\n\n    this.handleContentExpandClick = this.handleContentExpandClick.bind(this);\n    this.handleClickOpenReply = this.handleClickOpenReply.bind(this);\n    this.handleCloseReply = this.handleCloseReply.bind(this);\n    this.handleShowReplies = this.handleShowReplies.bind(this);\n    this.handleCloseShowReplies = this.handleCloseShowReplies.bind(this);\n  }\n\n  handleContentExpandClick() {\n    this.setState({contentExpanded: !this.state.contentExpanded});\n  }\n\n  handleClickOpenReply() {\n    this.setState({ replyToPostOpen: true });\n  };\n\n  handleCloseReply() {\n    this.setState({ replyToPostOpen: false });\n  };\n\n  async getReplies() {\n    this.setState({\n      replies: []\n    });\n    const replyIndices = await this.props.publicSquare.methods.getReplyIndicesOfPost(this.props.id).call();\n    for (var i = 0; i < replyIndices.length; i++) {\n      const reply = await this.props.publicSquare.methods.getReply(replyIndices[i]).call();\n      this.setState({\n        replies: [...this.state.replies, reply]\n      });\n    }\n  }\n\n  async handleShowReplies() {\n    await this.getReplies();\n    this.setState({ showReplies: true });\n  }\n\n  handleCloseShowReplies() {\n    this.setState({ showReplies: false });\n  }\n\n  render() {\n    let date = new Intl.DateTimeFormat('en-US',\n     { year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit' }).format(this.props.closeTimestamp*1000);\n    const closed = new Date().getTime() > this.props.closeTimestamp * 1000;\n    return (\n        <Card variant=\"outlined\">\n            <React.Fragment>\n                <CardContent>\n                <Typography style={{ wordWrap: \"break-word\" }} sx={{ fontSize: 30 }} color=\"text.secondary\" gutterBottom>\n                    {this.props.title}\n                </Typography>\n                <Typography variant=\"overline\" display=\"block\" sx={{ m: 2 }} gutterBottom>\n                    Author: {this.props.author}\n                </Typography>\n                </CardContent>\n                <ExpandMore\n                expand={this.state.contentExpanded}\n                onClick={this.handleContentExpandClick}\n                aria-expanded={this.state.contentExpanded}\n                aria-label=\"show more\"\n                >\n                    <ExpandMoreIcon />\n                </ExpandMore>\n                <Collapse in={this.state.contentExpanded} timeout=\"auto\" unmountOnExit>\n                    <CardContent>\n                        <Typography style={{ wordWrap: \"break-word\" }}>{this.props.content}</Typography>\n                    </CardContent>\n                </Collapse>\n                <CardActions>\n                <Button variant=\"contained\" disabled={!closed} onClick={this.handleShowReplies}>\n                  Open\n                </Button>\n                <PostDetails\n                  showReplies={this.state.showReplies}\n                  handleCloseShowReplies={this.handleCloseShowReplies}\n                  replies={this.state.replies}/>\n                <Button variant=\"contained\" disabled={closed} onClick={this.handleClickOpenReply}>Reply</Button>\n                <ReplyDialog\n                 postId={this.props.id}\n                 replyToPostOpen={this.state.replyToPostOpen}\n                 handleCloseReply={this.handleCloseReply}\n                 replyToPost={this.props.replyToPost}/>\n                <Typography variant=\"overline\" display=\"block\" sx={{ m: 2 }} gutterBottom>\n                  Close at {date}\n                </Typography>\n                </CardActions>\n            </React.Fragment>\n        </Card>\n    );\n  }\n}\n\nexport default Post;\n","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Post from './Post.js';\n\nclass PostGrid extends React.Component {\n  render() {\n    return (\n        <Stack spacing={2} sx={{ m: 2 }}>\n            {this.props.posts.map((post, key) => {\n                return <Post\n                          key={post.id}\n                          id={post.id}\n                          title={post.title}\n                          content={post.content}\n                          author={post.author}\n                          closeTimestamp={post.closeTimestamp}\n                          replyToPost={this.props.replyToPost}\n                          publicSquare={this.props.publicSquare}/>\n            })}\n        </Stack>\n    );\n  }\n}\n\nexport default PostGrid;\n","import TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\n\nclass CreatePostDialog extends React.Component {\n\n  handleTitleChange(event) {\n    this.setState({title: event.target.value});\n  }\n\n  keyPressForTitle(event){\n      if(event.keyCode === 13){ // enter\n        this.setState({title: `${event.target.value}\\\\n`});\n      }\n   }\n\n  handleContentChange(event) {\n    this.setState({content: event.target.value});\n  }\n\n  handleHoursChange(event) {\n    this.setState({hours: event.target.value});\n  }\n\n  handleCreate(event) {\n    event.preventDefault();\n    this.props.createPost(this.state.title, this.state.content, this.state.hours);\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      content: '',\n      hours: 0\n    }\n\n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.keyPressForTitle = this.keyPressForTitle.bind(this);\n\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleHoursChange = this.handleHoursChange.bind(this);\n    this.handleCreate = this.handleCreate.bind(this);\n  }\n\n  render() {\n    return (\n      <Dialog open={this.props.createPostOpen} onClose={this.props.handleClose}>\n        <DialogTitle>Create a post</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To create a post, enter title, content and number of hours before close.\n            People will not be able to reply after the close time and the replies will be\n            released all at once at close time.\n          </DialogContentText>\n          <Stack spacing={2} sx={{ width: '98%', m: 2}}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Title\"\n              multiline\n              rows={2}\n              value={this.state.title}\n              onChange={this.handleTitleChange}\n              placeholder=\"Title\"\n            />\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Content\"\n              multiline\n              rows={4}\n              value={this.state.content.replace(/↵/g, \"\\n\")}\n              onChange={this.handleContentChange}\n              placeholder=\"Content\"\n            />\n            <TextField\n              id=\"outlined-number\"\n              label=\"Hours before closing\"\n              type=\"number\"\n              value={this.state.hours}\n              onChange={this.handleHoursChange}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.handleClose}>Cancel</Button>\n          <Button onClick={this.handleCreate}>Create</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default CreatePostDialog;\n","import Web3 from \"web3\";\n\nasync function initWeb3() {\n  let web3Provider = null;\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    try {\n      // Request account access\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });;\n    } catch (error) {\n      // User denied account access...\n      console.error(\"User denied account access\")\n    }\n    web3Provider = window.ethereum;\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    console.log(\"Legacy dapp web3...\");\n    web3Provider = window.web3.currentProvider;\n  }\n  // If no injected web3 instance is detected, fall back to Ganache\n  else {\n    // comment out localhost when deploy\n    // web3Provider = new Web3.providers.HttpProvider('http://localhost:7545');\n    window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n  }\n  return new Web3(web3Provider);\n}\n\nexport default initWeb3;\n","export const PublicSquareABI = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_title\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_content\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_hoursBeforeClose\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"createPost\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_index\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getReply\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"id\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"content\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"closeTimestamp\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"author\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_postId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getReplyIndicesOfPost\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256[]\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256[]\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"postCount\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"posts\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"id\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"title\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"content\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"closeTimestamp\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"author\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"replyCount\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"_postId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"_content\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"replyToPost\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t}\n]\n\nexport default PublicSquareABI;\n","import React from 'react';\nimport './App.css';\nimport PostGrid from './components/PostGrid.js';\nimport CreatePostDialog from './components/CreatePostDialog.js';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport initWeb3 from './components/web3.js';\nimport Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport PublicSquareABI from './abis/PublicSquare.js';\n\n// import Web3 from 'web3';\nclass App extends React.Component {\n  async componentWillMount() {\n    window.web3 = await initWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    // Load account\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n    try {\n      const publicSquare = new web3.eth.Contract(\n          PublicSquareABI,\n          // \"0xA0C456E4F79d52573c89b7332d73C39580EBc550\" // localhost\n          \"0x03707134B800BD716f094e5C88Ab721Efde8b8B9\" // Kovan\n      );\n      this.setState({ publicSquare:  publicSquare});\n      const postCount = await publicSquare.methods.postCount().call();\n      this.setState({ postCount: postCount });\n      // Load Posts\n      for (var i = 0; i < postCount; i++) {\n        const post = await publicSquare.methods.posts(i).call();\n        this.setState({\n          posts: [...this.state.posts, post]\n        });\n      }\n      // Sort posts. Nearest close time\n      this.setState({\n        posts: this.state.posts.sort((a,b) => a.closeTimestamp - b.closeTimestamp )\n      });\n      this.setState({ loading: false});\n    } catch (err) {\n        window.alert(`PublicSquare contract not deployed to detected network.\\n\\n${err}`);\n    }\n  }\n\n  createPost(title, content, hoursBeforeClose) {\n    this.setState({ loading: true });\n    this.state.publicSquare.methods.createPost(title, content, hoursBeforeClose).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false });\n      window.location.reload();\n    })\n    .on(\"error\", function (error) {\n        alert(error);\n        window.location.reload();\n    });\n    this.handleClose();\n  }\n\n  replyToPost(postId, content) {\n    this.setState({ loading: true });\n    this.state.publicSquare.methods.replyToPost(postId, content).send({ from: this.state.account })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false });\n    })\n    .on(\"error\", function (error) {\n        alert(error);\n    });\n  }\n\n\n  handleClickOpen() {\n    this.setState({ createPostOpen: true });\n  };\n\n  handleClose() {\n    this.setState({ createPostOpen: false });\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      publicSquare: null,\n      postCount: 0,\n      posts: [],\n      loading: true,\n      createPostOpen: false\n    }\n    this.createPost = this.createPost.bind(this);\n    this.replyToPost = this.replyToPost.bind(this);\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Stack direction=\"row\" spacing={5}>\n            <Typography variant=\"h4\">Public Square</Typography>\n            <Button variant=\"contained\" onClick={this.handleClickOpen}>Create Post</Button>\n            <Typography variant=\"h4\">{this.state.postCount} Posted</Typography>\n            <CreatePostDialog\n              createPostOpen={this.state.createPostOpen}\n              handleClose={this.handleClose}\n              createPost={this.createPost}/>\n          </Stack>\n        </header>\n        <body>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n            <Stack spacing={2} direction=\"column\" sx={{ m: 2 }}>\n              <Card style={{ backgroundColor: \"#99a4aa\" }}>\n                  <React.Fragment>\n                      <CardContent align=\"left\">\n                        <Typography style={{ wordWrap: \"break-word\" }} color=\"text.secondary\">\n                        This is a “reddit”-like site with backend smart contract running on Ethereum. <b>You can create posts, reply to other people’s posts.</b><br />\n                          A few things to note:<br />\n                          &nbsp;&nbsp;1. Posts will show up instantly. But you will be setting <b># of HOURS BEFORE CLOSE</b> on your posts.\n                            People can reply to your posts before close time. And the replies will only be accessible after the close time.\n                             So no one influences other people’s thoughts.<br />\n                          &nbsp;&nbsp;2. You’ll be paying gas fees to post and reply, fees vary depending on the content.<br />\n                          &nbsp;&nbsp;3. This is a learning project, could potentially break in unexpected ways. Play at your own risk. You can contact me if you wish.\n                        </Typography>\n                        <Stack spacing={2} direction=\"row\" sx={{ m: 2 }}>\n                          <Typography variant=\"overline\" display=\"block\" color=\"common.white\">\n                            <a href=\"https://twitter.com/Cashmeregoat21\">DM @Cashmeregoat21</a>\n                          </Typography>\n                          <Typography variant=\"overline\" display=\"block\" color=\"common.white\">\n                          <a href=\"mailto:cashmeregoat21@protonmail.com\">E-Mail to cashmeregoat21@</a>\n                          </Typography>\n                        </Stack>\n                      </CardContent>\n                      </React.Fragment>\n                  </Card>\n                <PostGrid posts={this.state.posts}\n                          replyToPost={this.replyToPost}\n                          publicSquare={this.state.publicSquare}/>\n              </Stack>\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}